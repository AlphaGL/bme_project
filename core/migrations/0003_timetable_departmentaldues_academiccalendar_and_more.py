# Generated by Django 4.2.7 on 2025-10-13 16:45

import cloudinary.models
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('core', '0002_student_semester_course_cgpacalculation'),
    ]

    operations = [
        migrations.CreateModel(
            name='Timetable',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=300)),
                ('timetable_type', models.CharField(choices=[('Exam', 'Examination Timetable'), ('Class', 'Class Timetable')], max_length=10)),
                ('level', models.CharField(choices=[('100', '100 Level'), ('200', '200 Level'), ('300', '300 Level'), ('400', '400 Level'), ('500', '500 Level'), ('All', 'All Levels')], default='All', max_length=10)),
                ('semester', models.CharField(choices=[('First', 'First Semester'), ('Second', 'Second Semester')], max_length=10)),
                ('academic_session', models.CharField(help_text='e.g., 2023/2024', max_length=20)),
                ('image', cloudinary.models.CloudinaryField(help_text='Upload timetable image or PDF', max_length=255, validators=[django.core.validators.FileExtensionValidator(['jpg', 'jpeg', 'png', 'pdf'])], verbose_name='image')),
                ('description', models.TextField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('uploaded_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Timetables',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DepartmentalDues',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount_paid', models.DecimalField(decimal_places=2, default=5000.0, max_digits=10)),
                ('payment_reference', models.CharField(blank=True, max_length=100, unique=True)),
                ('is_approved', models.BooleanField(default=False, help_text='Admin approval required')),
                ('approved_at', models.DateTimeField(blank=True, null=True)),
                ('academic_session', models.CharField(help_text='e.g., 2023/2024', max_length=20)),
                ('receipt_number', models.CharField(blank=True, max_length=50, unique=True)),
                ('watermark_code', models.CharField(blank=True, help_text='Unique code for verification', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_dues', to=settings.AUTH_USER_MODEL)),
                ('student', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='departmental_dues', to='core.student')),
            ],
            options={
                'verbose_name_plural': 'Departmental Dues',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AcademicCalendar',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=300)),
                ('academic_session', models.CharField(help_text='e.g., 2023/2024', max_length=20)),
                ('image', cloudinary.models.CloudinaryField(help_text='Upload academic calendar image or PDF', max_length=255, validators=[django.core.validators.FileExtensionValidator(['jpg', 'jpeg', 'png', 'pdf'])], verbose_name='image')),
                ('description', models.TextField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Only one calendar should be active at a time')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('uploaded_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Academic Calendars',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CourseHandbook',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.CharField(choices=[('100', '100 Level'), ('200', '200 Level'), ('300', '300 Level'), ('400', '400 Level'), ('500', '500 Level')], max_length=10)),
                ('semester', models.CharField(choices=[('First', 'First Semester'), ('Second', 'Second Semester')], max_length=10)),
                ('course_code', models.CharField(max_length=20)),
                ('course_title', models.CharField(max_length=300)),
                ('credit_unit', models.IntegerField()),
                ('course_type', models.CharField(choices=[('Core', 'Core'), ('Required', 'Required'), ('Elective', 'Elective')], default='Core', max_length=20)),
                ('description', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('uploaded_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Course Handbook',
                'ordering': ['level', 'semester', 'course_code'],
                'unique_together': {('level', 'semester', 'course_code')},
            },
        ),
    ]
